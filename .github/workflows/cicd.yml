name: cicd

on: [push]
env:
  PYTHON_VERSION: "3.7"

jobs:
  # ***************************************************************************
  # Run linters and tests (all branches)
  # ***************************************************************************
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # TODO matrix of python versions
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/cache@v3
        env:
          cache-name: cache-cargo
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: make install

      - name: Build and install python package
        run: pip install .

      - name: Lint
        run: make lint

      - name: Test
        run: make test

  # ***************************************************************************
  # Perform a semantic release (only on push to main branch)
  # ***************************************************************************
  semantic-release:
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      semrel: ${{ steps.semrel.outputs.semrel }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: pip install python-semantic-release==7.31.4

      - name: Semantic Release
        id: semrel
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"
          semantic-release publish -D commit_author='github-actions <action@github.com>' 2> out.txt
          echo "::set-output name=semrel::$(cat out.txt)"
        env:
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}

      - name: Show Semantic Release output
        run: echo ${{ steps.semrel.outputs.semrel }}

  # ***************************************************************************
  # Build wheels on Win/Mac/Linux (only on push to main branch)
  # ***************************************************************************
  build-linux:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(join(needs.semrel.outputs.semrel), 'No release will be made')
    needs: semantic-release

    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist
          maturin-version: "v0.13.2"
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  build-windows:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(join(needs.semrel.outputs.semrel), 'No release will be made')
    needs: semantic-release

   runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.target }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          maturin-version: "v0.13.2"
      - name: Install built wheel
        shell: bash
        run: |
          python -m pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  build-macos:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(join(needs.semrel.outputs.semrel), 'No release will be made')
    needs: semantic-release

    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist
          maturin-version: "v0.13.2"
      - name: Install built wheel - x86_64
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-*.whl --force-reinstall
      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist
          maturin-version: "v0.13.2"
      - name: Install built wheel - universal2
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-*universal2.whl --force-reinstall
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  # ***************************************************************************
  # Release package to Test and then actual PyPI (only on push to main branch)
  # ***************************************************************************
  release:
    needs: [semantic-release, build-macos, build-windows, build-linux]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(join(needs.semrel.outputs.semrel), 'No release will be made')

    name: release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels

      - name: Publish to Test PyPI
        uses: messense/maturin-action@v1
        env:
          MATURIN_USERNAME: __token__
          MATURIN_PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
          MATURIN_REPOSITORY_URL: https://test.pypi.org/legacy/
        with:
          command: upload
          args: --skip-existing *

      - name: Test install from Test PyPI
        run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          fast-haversine

      - name: Verify package after install from Test PyPI
        run: python -c "import fast_haversine; print(fast_haversine.__version__)"

      - name: Publish to PyPI
        uses: messense/maturin-action@v1
        env:
          MATURIN_USERNAME: __token__
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
